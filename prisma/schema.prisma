// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Kategori {
  id         Int          @id @default(autoincrement())
  name       String
  userdaftar UserDaftar[]
}

model UserDaftar {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  email      String   @unique
  noWa       String
  kategori   Kategori @relation(fields: [kategoriId], references: [id])
  kategoriId Int
  image      String
  createAt   DateTime @default(now())
  updateAt   DateTime @updatedAt
}

model dataKelas {
  id         Int      @id @default(autoincrement())
  nama       String   @unique
  hargaAsli  Int
  hargaDisc  Int
  discpersen Int
  createAt   DateTime @default(now())
  updateAt   DateTime @updatedAt
}

model dataTesti {
  id       Int      @id @default(autoincrement())
  image    String
  nama     String   @unique
  job      String
  testi    String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model dataInfoLomba {
  id          Int      @id @default(autoincrement())
  image       String
  kategori    String
  nama        String   @unique
  desc        String
  deadline    String
  totalHadiah String
  link1       String
  link2       String
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  username      String?   @unique
  password      String?
  createAt      DateTime  @default(now())
  updateAt      DateTime  @updatedAt
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
